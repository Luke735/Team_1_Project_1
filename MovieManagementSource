#include <iostream>
#include <fstream>
#include <iomanip>
#include <string>
#include <list>
#include <iterator>
#include <vector>
#include "Movie.h"
using namespace std;

int main() {

    ifstream fin("movie.txt");

    if (!fin.is_open()) {
        cout << "Could not open file" << endl;
    }
    else {
        ofstream fout;
        fout.open("results_1.txt");
        list<Movie> comingList, showingList;
        vector<string> names, release_dates, receive_dates, descriptions, statuses;
        string line;
        while (getline(fin, line)) {
            string name = "", release_date = "", description = "", receive_date = "", status = "";
            int count = 0, breaker = 0;
            for (count; count < line.size(); count++) {
                char current;
                current = line.at(count);
                if (current == ',') {
                    ++breaker;
                    continue;
                }
                if (breaker == 0) {
                    name.push_back(current);
                }
                if (breaker == 1 && current != ' ') {
                    release_date.push_back(current);
                }
                if (breaker == 2 && current != ' ') {
                    description.push_back(current);
                }
                if (breaker == 3 && current != ' ') {
                    receive_date.push_back(current);
                }
                if (breaker == 4 && current != ' ') {
                    status.push_back(current);
                }
            }
            names.push_back(name);
            release_dates.push_back(release_date);
            receive_dates.push_back(receive_date);
            descriptions.push_back(description);
            statuses.push_back(status);

            Date newReceiveDate = Date();
            newReceiveDate.set_day(stoi(receive_date.substr(0, 3)));
            newReceiveDate.set_month(stoi(receive_date.substr(3, 6)));
            newReceiveDate.set_year(stoi(receive_date.substr(6)));

            Date newReleaseDate = Date();
            newReleaseDate.set_day(stoi(release_date.substr(0, 3)));
            newReleaseDate.set_month(stoi(release_date.substr(3, 6)));
            newReleaseDate.set_year(stoi(release_date.substr(6)));

            bool statuss = false;
            if (status == "1") { statuss = true; }
            Movie newMovie = Movie(name, newReleaseDate, description, newReceiveDate, statuss);

            if (statuss == true) {
                list<Movie>::iterator it;
                if (showingList.size() > 0) {
                    int count = 0;
                    for (it = showingList.begin(); it != showingList.end(); it++) {
                        ++count;
                        if (newMovie <= *it) {
                            showingList.insert(it, newMovie);
                            //continue;
                        }
                    }
                    if (count == showingList.size() && showingList.size() != 0) {
                        showingList.push_back(newMovie);
                        //continue;
                    }
                }
                else { showingList.push_back(newMovie); }
            }
            if (statuss == false) {
                list<Movie>::iterator it;
                if (comingList.size() > 0) {
                    int count = 0;
                    for (it = comingList.begin(); it != comingList.end(); it++) {
                        ++count;
                        if (newMovie <= *it) {
                            comingList.insert(it, newMovie);
                            //continue;
                        }
                    }
                    if (count == comingList.size() && comingList.size() != 0) {
                        comingList.push_back(newMovie);
                        //continue;
                    }
                }
                else { comingList.push_back(newMovie); }
            }
        }

        string option = "e";
        //the menu is in a while loop until the option selected is q
        //the menu only reads the first character of the input as the option
        while (option.at(0) != 'q') {
            cout << "MENU" << endl;
            cout << "a - Display movies" << endl;
            cout << "b - Add movies" << endl;
            cout << "c - Edit release dates" << endl;
            cout << "d - Edit movie description" << endl;
            cout << "e - Start showing movies in the theatre" << endl;
            cout << "f - Number of movies before a date" << endl;
            cout << "s - Save" << endl;
            cout << "q - Quit" << endl;
            cout << endl;
            cout << "Choose an option: " << endl;
            cin >> option;

            //explain option here
            if (option.at(0) == 'a') {
                cout << "Coming list:" << endl;
                list<Movie>::iterator it;
                for (it = comingList.begin(); it != comingList.end(); ++it) {
                    cout << *it << endl;
                }
                cout << endl << "Showing list:" << endl;
                list<Movie>::iterator it2;
                for (it2 = showingList.begin(); it2 != showingList.end(); ++it2) {
                    cout << *it2 << endl;
                }
            }
            //explain option here
            if (option.at(0) == 'b') {
                string newName, newDescription;
                string newStatusStr;
                bool newStatusBool;
                Date newReceiveDate = Date();
                Date newReleaseDate = Date();
                string dateInput;

                cout << "Enter the movie's name";
                cin.ignore();
                getline(cin, newName);
                
                cout << "Enter the movie's release date day" << endl;
                cin >> dateInput;
                newReleaseDate.set_day(stoi(dateInput.substr(0, 2)));
                cout << "Enter the movie's release date month" << endl;
                cin >> dateInput;
                newReleaseDate.set_month(stoi(dateInput.substr(0, 2)));
                cout << "Enter the movie's release date year" << endl;
                cin >> dateInput;
                newReleaseDate.set_year(stoi(dateInput.substr(0, 2)));

                cout << "Enter the movie's description" << endl;
                cin.ignore();
                getline(cin, newDescription);

                cout << "Enter the movie's receive date day" << endl;
                cin >> dateInput;
                newReceiveDate.set_day(stoi(dateInput.substr(0, 2)));
                cout << "Enter the movie's receive date month" << endl;
                cin >> dateInput;
                newReceiveDate.set_month(stoi(dateInput.substr(0, 2)));
                cout << "Enter the movie's receive date year" << endl;
                cin >> dateInput;
                newReceiveDate.set_year(stoi(dateInput.substr(0, 2)));

                cout << "Is the movie showing (enter 1) or coming (enter 0)" << endl;
                cin >> newStatusStr;
                if (newStatusStr.at(0) == '1') { newStatusBool = true; }
                else { newStatusBool = false; }
                
                Movie newMovie = Movie(newName, newReleaseDate, newDescription, newReceiveDate, newStatusBool);
                comingList.push_back(newMovie);


            }
            //explain option here
            if (option.at(0) == 'c') {
                string moviename;
                cout << "Enter the name of the movie to edit the release date: ";
                cin.ignore();
                getline(cin, moviename);

                bool movieExist = false;
                list<Movie>::iterator it;
                Date editReleaseDate = Date();

                for (it = comingList.begin(); it != comingList.end(); ++it) {
                    if (it->get_name() == moviename) {
                        movieExist = true; // Checking movie exists or not. If it exists, returns true and update. Otherwise, print out "movie does not exist".

                        string newDateInput;
                        cout << "Enter the new release date's day: " << endl;
                        cin >> newDateInput;
                        editReleaseDate.set_day(stoi(newDateInput.substr(0, 2)));
                        cout << "Enter the new release date's month: " << endl;
                        cin >> newDateInput;
                        editReleaseDate.set_month(stoi(newDateInput.substr(0, 2)));
                        cout << "Enter the new release date's year" << endl;
                        cin >> newDateInput;
                        editReleaseDate.set_year(stoi(newDateInput.substr(0, 4)));

                        string names = moviename;
                        string description = it->get_description();
                        Date receive_date = it->get_recieve_date();
                        bool status_ = 0;


                        it->set_release_date(editReleaseDate.get_day(), editReleaseDate.get_month(), editReleaseDate.get_year());
                        cout << "Updated the release date completely." << endl << endl;

                        Movie editMovie = Movie(moviename, editReleaseDate, description, receive_date, status_);
                        //comingList.push_back(editMovie);
                        cout << editMovie << endl; // Checking whether I put right information.
                        break;
                    }
                }
                if (!movieExist) {
                    cout << "Movie does not exist." << endl;
                }

            }
            //explain option here
            if (option.at(0) == 'd') {
                string moviename;
                cout << "Enter the name of the movie to edit the description: ";
                cin.ignore();
                getline(cin, moviename);

                bool movieExist = false;
                string newDescription;
                list<Movie>::iterator it;
                Date editReleaseDate = Date();

                for (it = comingList.begin(); it != comingList.end(); ++it) {
                    if (it->get_name() == moviename) {
                        movieExist = true; // true
                        cout << "Enter the new description for the movie: ";
                        getline(cin, newDescription);

                        it->set_description(newDescription);

                        string names = it->get_name();
                        Date release_date = it->get_release_date();
                        Date receive_date = it->get_recieve_date();
                        bool status_ = 0;

                        cout << "Updated the description completely." << endl << endl;

                        Movie editDesMovie = Movie(names, release_date, newDescription, receive_date, status_);
                        cout << editDesMovie << endl; // Checking.
                        break;
                    }
                }
                if (!movieExist) {
                    cout << "Movie does not exist." << endl;
                }
            }
            //starts showing all movies with the specified release date
            if (option.at(0) == 'e') {

            }
            //explain option here
            if (option.at(0) == 'f') {

            }
            //explain option here
            if (option.at(0) == 's') {

            }
        }//end while loop
        fin.close();
        fout.close();
    }
    return 0;
}
